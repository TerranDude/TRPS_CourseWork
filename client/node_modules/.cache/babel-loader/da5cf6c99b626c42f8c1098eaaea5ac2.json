{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2400G\\\\Downloads\\\\trps coursework2502\\\\trps coursework\\\\client\\\\src\\\\pages\\\\SinglePost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Card, Form, Grid, Label, Button, Image, Icon, CommentActions } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { useParams } from 'react-router-dom';\nimport LikeButton from '../components/LikeButton';\nimport { AuthContext } from '../context/auth';\nimport DeleteButton from '../components/DeleteButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SinglePost() {\n  _s();\n\n  const [comment, setComment] = useState('');\n  const {\n    postId\n  } = useParams();\n  const {\n    user\n  } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n  const {\n    data: {\n      getPost\n    } = {}\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n\n    variables: {\n      postId,\n      body: comment\n    }\n  });\n  let postMarkup;\n\n  if (!getPost) {\n    postMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading post..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this);\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      likes,\n      likeCount,\n      commentCount,\n      comments\n    } = getPost;\n    console.log('this is likesCount');\n    console.log(likeCount);\n    postMarkup = /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 2,\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            src: \"https://react.semantic-ui.com/images/avatar/large/molly.png\",\n            size: \"small\",\n            float: \"right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 10,\n          children: [/*#__PURE__*/_jsxDEV(Card, {\n            fluid: true,\n            children: [/*#__PURE__*/_jsxDEV(Card.Content, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n                children: username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n                children: [\" \", moment(createdAt).fromNow()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Card.Description, {\n                children: body\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Card.Content, {\n              children: [/*#__PURE__*/_jsxDEV(LikeButton, {\n                user: user,\n                post: {\n                  id,\n                  likes,\n                  likeCount,\n                  likes\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                as: \"div\",\n                labelPosition: \"right\",\n                onClick: () => console.log('Comment on post'),\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  basic: true,\n                  color: \"blue\",\n                  children: /*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"comments\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 38\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(Label, {\n                  basic: true,\n                  color: \"blue\",\n                  pointing: \"left\",\n                  children: commentCount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 29\n              }, this), user && user.username === username && /*#__PURE__*/_jsxDEV(DeleteButton, {\n                postId: id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this), user && /*#__PURE__*/_jsxDEV(Card, {\n            fluid: true,\n            children: /*#__PURE__*/_jsxDEV(Card.Content, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Post Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  classname: \"ui action input \",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    placeholder: \"Comment..\",\n                    name: \"comment\",\n                    value: comment,\n                    onChange: event => setComment(event.target.value),\n                    ref: commentInputRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    className: \"ui button teal\",\n                    disabled: comment.trim() === '',\n                    onClick: submitComment,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(Card, {\n            fluid: true,\n            children: /*#__PURE__*/_jsxDEV(Card.Content, {\n              children: [user && user.username === comment.username && /*#__PURE__*/_jsxDEV(DeleteButton, {\n                postId: id,\n                commentId: comment.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Header, {\n                children: comment.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n                children: moment(comment.createdAt).fromNow()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Card.Description, {\n                children: comment.body\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)\n          }, comment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n  return postMarkup;\n}\n\n_s(SinglePost, \"Nln1HWdoCDjI9e2JiOAvmL9RQag=\", false, function () {\n  return [useParams, useQuery, useMutation];\n});\n\n_c = SinglePost;\nconst FETCH_POST_QUERY = gql`\n    query($postId: ID!) {\n        getPost(postId: $postId){\n            id body createdAt username likeCount\n            likes {\n                username\n            }\n            commentCount\n            comments {\n                id username createdAt body\n            }\n        }\n    }\n\n`;\nconst SUBMIT_COMMENT_MUTATION = gql`\n    mutation($postId: String!,$body:String!){\n        createComment(postId:$postId,body:$body){\n            id\n            comments{\n                id body createdAt username\n            }\n            commentCount\n        }\n    }\n\n`;\nexport default SinglePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"sources":["C:/Users/2400G/Downloads/trps coursework2502/trps coursework/client/src/pages/SinglePost.js"],"names":["React","useContext","useState","useRef","gql","useQuery","useMutation","Card","Form","Grid","Label","Button","Image","Icon","CommentActions","moment","useParams","LikeButton","AuthContext","DeleteButton","SinglePost","comment","setComment","postId","user","commentInputRef","data","getPost","FETCH_POST_QUERY","variables","submitComment","SUBMIT_COMMENT_MUTATION","update","current","blur","body","postMarkup","id","createdAt","username","likes","likeCount","commentCount","comments","console","log","fromNow","event","target","value","trim","map"],"mappings":"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","sourcesContent":["import React, {useContext,useState,useRef} from 'react'\r\nimport gql from 'graphql-tag'\r\nimport {useQuery,useMutation} from '@apollo/react-hooks'\r\nimport { Card, Form, Grid, Label,Button,Image,Icon, CommentActions } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\nimport {useParams} from 'react-router-dom'\r\n\r\n\r\nimport LikeButton from '../components/LikeButton';\r\nimport {AuthContext} from '../context/auth'\r\nimport DeleteButton from '../components/DeleteButton';\r\n\r\n\r\nfunction SinglePost() {\r\n\r\n    const[comment,setComment] =useState('');\r\n    const {postId} =useParams();\r\n    const {user}= useContext(AuthContext)\r\n    const commentInputRef=useRef(null)\r\n    const {data:{getPost}={}}= useQuery(FETCH_POST_QUERY, {\r\n        variables:{\r\n            postId\r\n        }\r\n    })\r\n\r\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION,{\r\n        update(){\r\n            setComment('')\r\n            commentInputRef.current.blur();\r\n        },\r\n        variables:{\r\n            postId,\r\n            body: comment\r\n        }\r\n    })\r\n\r\n    let postMarkup;\r\n    if(!getPost){\r\n        postMarkup= <p>Loading post..</p>\r\n    } else {\r\n        const {id,body,createdAt,username,likes,likeCount,commentCount,comments} =  getPost;\r\n        console.log('this is likesCount')\r\n        console.log(likeCount);\r\n        postMarkup = (\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column width={2}>\r\n                    <Image\r\n                    src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                    size=\"small\"\r\n                    float=\"right\"\r\n                    />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10}>\r\n                    <Card fluid>\r\n                        <Card.Content>\r\n                            <Card.Header>\r\n                                {username}\r\n                            </Card.Header>\r\n                            <Card.Meta> {moment(createdAt).fromNow()}</Card.Meta>\r\n                            <Card.Description>{body}</Card.Description>\r\n                        </Card.Content>\r\n                        <hr/>\r\n                        <Card.Content>\r\n                        <LikeButton user={user} post={{id, likes,likeCount,likes}}/>\r\n                            <Button \r\n                             as=\"div\"\r\n                             labelPosition=\"right\"\r\n                             onClick={( )=> console.log('Comment on post')}\r\n                             >\r\n                                 <Button basic color=\"blue\">\r\n                                     <Icon name=\"comments\"/>\r\n                                 </Button>\r\n                                \r\n                                <Label basic color=\"blue\" pointing=\"left\">\r\n                                    {commentCount}\r\n                                </Label> \r\n                            </Button>\r\n                            {user && user.username ===username && (\r\n                                <DeleteButton postId={id} />\r\n                            )}     \r\n                        </Card.Content>\r\n                    </Card>\r\n                    {user && (\r\n                        <Card fluid>\r\n                            <Card.Content>\r\n                            <p>Post Comment</p>\r\n                            <Form>\r\n                                <div classname=\"ui action input \">\r\n                                    <input type=\"text\"\r\n                                    placeholder='Comment..'\r\n                                    name='comment'\r\n                                    value={comment}\r\n                                    onChange={event => setComment(event.target.value)}\r\n                                    ref={commentInputRef}\r\n                                    />\r\n                                    <button type=\"submit\"\r\n                                        className=\"ui button teal\"\r\n                                        disabled={comment.trim()===''}\r\n                                        onClick={submitComment}>\r\n                                            Submit\r\n                                        </button>\r\n                                </div>\r\n                            </Form>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    )}\r\n                    {comments.map(comment => (\r\n                        <Card fluid key={comment.id}>\r\n                            <Card.Content>\r\n                                {user && user.username === comment.username &&(\r\n                                    <DeleteButton postId={id} commentId={comment.id}/>\r\n                                )}\r\n                                <Card.Header>{comment.username}</Card.Header>\r\n                                <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                                <Card.Description>{comment.body}</Card.Description>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    ))}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        )\r\n    }\r\n    return postMarkup;\r\n}\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n    query($postId: ID!) {\r\n        getPost(postId: $postId){\r\n            id body createdAt username likeCount\r\n            likes {\r\n                username\r\n            }\r\n            commentCount\r\n            comments {\r\n                id username createdAt body\r\n            }\r\n        }\r\n    }\r\n\r\n`\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql `\r\n    mutation($postId: String!,$body:String!){\r\n        createComment(postId:$postId,body:$body){\r\n            id\r\n            comments{\r\n                id body createdAt username\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n\r\n`\r\n\r\nexport default SinglePost"]},"metadata":{},"sourceType":"module"}