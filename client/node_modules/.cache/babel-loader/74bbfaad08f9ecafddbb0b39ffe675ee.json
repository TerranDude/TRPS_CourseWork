{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2400G\\\\Downloads\\\\trps coursework2502\\\\trps coursework\\\\client\\\\src\\\\components\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../utils/hooks';\nimport { FETCH_POSTS_QUERY } from '../utils/graphql';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PostForm() {\n  _s();\n\n  const {\n    values,\n    onChange,\n    onSubmit\n  } = useForm(createPostCallBack, {\n    body: ''\n  });\n  const [createPost, {\n    error\n  }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: { ...data,\n          getPosts: [result.data.createPost, ...data.getPosts]\n        }\n      });\n      values.body = '';\n    }\n\n  });\n\n  function createPostCallBack() {\n    createPost();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a post:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          placeholder: \"Hi World\",\n          name: \"body\",\n          onChange: onChange,\n          values: values.body,\n          error: error ? true : false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          colot: \"teal\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui error message\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: error.graphQLErrors[0].message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PostForm, \"jqdI/YQGDOyZD22DBgkzQeC2QR8=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = PostForm;\nconst CREATE_POST_MUTATION = gql`\n    mutation createPost($body:String!){\n        createPost(body:$body){\n            id body createdAt username\n            likes {\n                id username createdAt\n            }\n            likeCount\n            comments {\n                id body username createdAt\n            }\n            commentCount\n        }\n    }\n`;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/2400G/Downloads/trps coursework2502/trps coursework/client/src/components/PostForm.js"],"names":["React","Button","Form","gql","useMutation","useForm","FETCH_POSTS_QUERY","PostForm","values","onChange","onSubmit","createPostCallBack","body","createPost","error","CREATE_POST_MUTATION","variables","update","proxy","result","data","readQuery","query","writeQuery","getPosts","graphQLErrors","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAeC,IAAf,QAA0B,mBAA1B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AAEA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAEhB,QAAK;AAACC,IAAAA,MAAD;AAAQC,IAAAA,QAAR;AAAiBC,IAAAA;AAAjB,MAA6BL,OAAO,CAACM,kBAAD,EAAoB;AACzDC,IAAAA,IAAI,EAAC;AADoD,GAApB,CAAzC;AAGA,QAAM,CAACC,UAAD,EAAY;AAACC,IAAAA;AAAD,GAAZ,IAAuBV,WAAW,CAACW,oBAAD,EAAsB;AAC1DC,IAAAA,SAAS,EAAER,MAD+C;;AAE1DS,IAAAA,MAAM,CAACC,KAAD,EAAOC,MAAP,EAAc;AAChB,YAAMC,IAAI,GAAEF,KAAK,CAACG,SAAN,CAAgB;AACxBC,QAAAA,KAAK,EAAEhB;AADiB,OAAhB,CAAZ;AAGAY,MAAAA,KAAK,CAACK,UAAN,CAAiB;AACbD,QAAAA,KAAK,EAAEhB,iBADM;AAEbc,QAAAA,IAAI,EAAC,EACD,GAAGA,IADF;AAEDI,UAAAA,QAAQ,EAAC,CAACL,MAAM,CAACC,IAAP,CAAYP,UAAb,EAAwB,GAAGO,IAAI,CAACI,QAAhC;AAFR;AAFQ,OAAjB;AAOAhB,MAAAA,MAAM,CAACI,IAAP,GAAY,EAAZ;AACH;;AAdyD,GAAtB,CAAxC;;AAkBA,WAASD,kBAAT,GAA8B;AAC1BE,IAAAA,UAAU;AACb;;AAED,sBACI;AAAA,4BACA,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEH,QAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD,CAAM,KAAN;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AACI,UAAA,WAAW,EAAC,UADhB;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,EAAED,QAHd;AAII,UAAA,MAAM,EAAED,MAAM,CAACI,IAJnB;AAKI,UAAA,KAAK,EAAEE,KAAK,GAAG,IAAH,GAAU;AAL1B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,KAAK,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAgBCA,KAAK,iBACF;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACI;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,+BACI;AAAA,oBAAKA,KAAK,CAACW,aAAN,CAAoB,CAApB,EAAuBC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA,kBADJ;AA0BH;;GArDQnB,Q;UAE6BF,O,EAGLD,W;;;KALxBG,Q;AAuDT,MAAMQ,oBAAoB,GAAEZ,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,eAAeI,QAAf","sourcesContent":["import React from 'react'\r\nimport {Button,Form} from 'semantic-ui-react'\r\nimport gql from 'graphql-tag'\r\nimport {useMutation} from '@apollo/react-hooks'\r\n\r\nimport {useForm} from '../utils/hooks'\r\nimport { FETCH_POSTS_QUERY } from '../utils/graphql'\r\n\r\nfunction PostForm() {\r\n\r\n    const{values,onChange,onSubmit} = useForm(createPostCallBack,{\r\n        body:''\r\n        })\r\n    const [createPost,{error}] = useMutation(CREATE_POST_MUTATION,{\r\n        variables: values,\r\n        update(proxy,result){\r\n            const data =proxy.readQuery({\r\n                query :FETCH_POSTS_QUERY\r\n            });\r\n            proxy.writeQuery({\r\n                query: FETCH_POSTS_QUERY,\r\n                data:{\r\n                    ...data,\r\n                    getPosts:[result.data.createPost,...data.getPosts]\r\n                }\r\n            })\r\n            values.body=''\r\n        }\r\n    })\r\n\r\n\r\n    function createPostCallBack( ){\r\n        createPost();\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Form onSubmit={onSubmit}>\r\n            <h2>Create a post:</h2>\r\n            <Form.Field>\r\n                <Form.Input\r\n                    placeholder=\"Hi World\"\r\n                    name=\"body\"\r\n                    onChange={onChange}\r\n                    values={values.body}\r\n                    error={error ? true : false}\r\n                    />\r\n                <Button type=\"submit\" colot=\"teal\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Field>\r\n        </Form>\r\n        {error && (\r\n            <div className=\"ui error message\">\r\n                <ul className=\"list\">\r\n                    <li>{error.graphQLErrors[0].message}</li>\r\n                </ul>\r\n            </div>\r\n        )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst CREATE_POST_MUTATION =gql`\r\n    mutation createPost($body:String!){\r\n        createPost(body:$body){\r\n            id body createdAt username\r\n            likes {\r\n                id username createdAt\r\n            }\r\n            likeCount\r\n            comments {\r\n                id body username createdAt\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default PostForm"]},"metadata":{},"sourceType":"module"}