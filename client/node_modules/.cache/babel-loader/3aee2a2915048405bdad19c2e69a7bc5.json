{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nikulin\\\\Downloads\\\\trps coursework\\\\client\\\\src\\\\context\\\\auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem('jwtToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: userData => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem(\"jwtToken\", userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwtToken\");\n    dispatch({\n      type: 'LOGOUT'\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      login,\n      logout\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 13\n  }, this);\n}\n\n_s(AuthProvider, \"UrEkDPQH5U12xnblC9PjDJeyoVE=\");\n\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/nikulin/Downloads/trps coursework/client/src/context/auth.js"],"names":["React","useReducer","createContext","jwtDecode","initialState","user","localStorage","getItem","decodedToken","exp","Date","now","removeItem","AuthContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch","setItem","token"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAA0BC,aAA1B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAC;AADY,CAArB;;AAIA,IAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAH,EAAqC;AAGjC,QAAMC,YAAY,GAAGL,SAAS,CAACG,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAA9B;;AAEA,MAAGC,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAAyBC,IAAI,CAACC,GAAL,EAA5B,EAAuC;AACnCL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACH,GAFD,MAEM;AACFR,IAAAA,YAAY,CAACC,IAAb,GAAoBG,YAApB;AACH;AACJ;;AAGD,MAAMK,WAAW,gBAAGX,aAAa,CAAE;AAC/BG,EAAAA,IAAI,EAAC,IAD0B;AAE/BS,EAAAA,KAAK,EAAGC,QAAD,IAAc,CAAE,CAFQ;AAG/BC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAHe,CAAF,CAAjC;;AAMA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAmC;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,OAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFb,QAAAA,IAAI,EAAEc,MAAM,CAACE;AAFX,OAAN;;AAIJ,SAAK,QAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHb,QAAAA,IAAI,EAAE;AAFH,OAAP;;AAIJ;AACI,aAAOa,KAAP;AAZR;AAcH;;AAED,SAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACzB,QAAM,CAACL,KAAD,EAAOM,QAAP,IAAmBvB,UAAU,CAACgB,WAAD,EAAab,YAAb,CAAnC;;AAEA,WAASU,KAAT,CAAgBC,QAAhB,EAA0B;AACtBT,IAAAA,YAAY,CAACmB,OAAb,CAAqB,UAArB,EAAgCV,QAAQ,CAACW,KAAzC;AACAF,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAC,OADA;AAELC,MAAAA,OAAO,EAACN;AAFH,KAAD,CAAR;AAIH;;AAED,WAASC,MAAT,GAAiB;AACbV,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAY,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;AACH;;AAAA;AAEG,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AAACf,MAAAA,IAAI,EAAEa,KAAK,CAACb,IAAb;AAAmBS,MAAAA,KAAnB;AAA0BE,MAAAA;AAA1B,KADX;AAAA,OAEQO;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAvBID,Y;;KAAAA,Y;AAyBT,SAAQT,WAAR,EAAoBS,YAApB","sourcesContent":["import React,{useReducer, createContext} from 'react'\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst initialState = {\r\n    user:null\r\n}\r\n\r\nif(localStorage.getItem('jwtToken')) {\r\n    \r\n    \r\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\r\n\r\n    if(decodedToken.exp * 1000 <Date.now()){\r\n        localStorage.removeItem('jwtToken');\r\n    }else {\r\n        initialState.user = decodedToken;\r\n    }\r\n}\r\n\r\n\r\nconst AuthContext = createContext( {\r\n    user:null,\r\n    login: (userData) => {},\r\n    logout: () => {}\r\n})\r\n\r\nfunction authReducer(state, action){\r\n    switch(action.type){\r\n        case 'LOGIN':\r\n            return{\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        case 'LOGOUT':\r\n            return {\r\n                ...state,\r\n                user: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n    const [state,dispatch] = useReducer(authReducer,initialState);\r\n\r\n    function login (userData) {\r\n        localStorage.setItem(\"jwtToken\",userData.token)\r\n        dispatch({\r\n            type:'LOGIN',\r\n            payload:userData\r\n        })\r\n    }\r\n\r\n    function logout(){\r\n        localStorage.removeItem(\"jwtToken\")\r\n        dispatch({type:'LOGOUT'});\r\n    };\r\n\r\n        return (\r\n            <AuthContext.Provider\r\n                value={{user: state.user, login, logout}}\r\n                {...props}\r\n                />\r\n        )\r\n        \r\n    }\r\n\r\nexport {AuthContext,AuthProvider}"]},"metadata":{},"sourceType":"module"}